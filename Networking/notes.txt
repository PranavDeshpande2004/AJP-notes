ðŸ“ŒNETWORKING

 ðŸ“ŒTpoic1. Connection-Oriented Transmission
Connection-oriented transmission refers to a type of communication in which a dedicated connection (channel) 
is established between sender and receiver before any data is transferred.
It belong to java.net Packages
âœ… Key Features:
1.Uses TCP (Transmission Control Protocol)
2.Ensures data integrity

ðŸ”¸ 2. Java Classes for TCP:
| Class          | Description                                                      |
| -------------- | ---------------------------------------------------------------- |
| `Socket`      | Used by client to connect to server                          |
| `ServerSocket` | Used by server to listen and accept connections from clients |

ðŸ”¹ Stream-Based Communication:
TCP sockets use InputStream and OutputStream to send/receive data.
Stream-based = continuous byte transfer (like audio stream).

ðŸ”¸ 3. Creating a TCP Client in Java
âœ… Steps:
Create a Socket to connect to server
Get OutputStream to send data
Get InputStream to receive data
Close socket

ðŸ”¹ Example Code:
import java.io.*;
import java.net.*;

public class TCPClient {
    public static void main(String[] args) throws IOException {
        Socket socket = new Socket("localhost", 5000); 
        DataOutputStream out = new DataOutputStream(socket.getOutputStream());
        DataInputStream in = new DataInputStream(socket.getInputStream());

        out.writeUTF("Hello from Client");
        String response = in.readUTF();
        System.out.println("Server says: " + response);

        socket.close();
    }
}

ðŸ”¸ 4. Creating a TCP Server in Java
âœ… Steps:
Create a ServerSocket on a port
Wait for client using accept()
Use InputStream and OutputStream
Close connections

ðŸ”¹ Example Code:
import java.io.*;
import java.net.*;

public class TCPServer {
    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(5000);
        System.out.println("Server started, waiting for client...");

        Socket clientSocket = serverSocket.accept(); // wait for client
        DataInputStream in = new DataInputStream(clientSocket.getInputStream());
        DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());

        String message = in.readUTF();
        System.out.println("Client says: " + message);
        out.writeUTF("Hello from Server");

        clientSocket.close();
        serverSocket.close();
    }
}

ðŸ§  Mini Mind Map
Connection-Oriented (TCP)
â”‚
â”œâ”€â”€ Uses Socket, ServerSocket
â”œâ”€â”€ Client
â”‚   â””â”€â”€ Socket + Output/Input
â”œâ”€â”€ Server
â”‚   â””â”€â”€ ServerSocket + accept()
â””â”€â”€ Stream-based data exchange


ðŸ“ŒTopic 2: InetAddress, Factory Methods, Instance Methods, Inet4Address, Inet6Address

âœ… Definition:
InetAddress is a class in the java.net package that represents an IP address (either IPv4 or IPv6) and can be used to resolve hostnames into IP addresses and vice versa.
ðŸ“¦ Package:java.net.InetAddress

âœ… Purpose:
Lookup IP address by hostname
Reverse lookup: hostname from IP
Handle both IPv4 (Handle 32 bit)and IPv6(Handle 128 bit) addresse

âœ… Factory Methods of InetAddress
Factory methods are static methods used to create or retrieve InetAddress objects.
| Method                      | Description                                           |
| --------------------------- | ----------------------------------------------------- |
| `getByName(String host)`    | Returns `InetAddress` for a hostname                  |
| `getByAddress(byte[] addr)` | Returns address from byte array                       |
| `getLocalHost()`            | Returns IP address of the **local machine**           |
| `getAllByName(String host)` | Returns **all** IP addresses associated with hostname |

âœ… Instance Methods of InetAddress
Once you have an InetAddress object, you can use instance methods to retrieve information.
| Method                     | Description                                   |
| -------------------------- | --------------------------------------------- |
| `getHostName()`            | Returns the hostname                          |
| `getHostAddress()`         | Returns IP address as a string                |
| `isReachable(int timeout)` | Checks if the host is reachable               |
| `toString()`               | String representation of address              |

ðŸ”¹ Example Code:
import java.net.*;
public class Inet {
    public static void main(String[] args) throws Exception {
        InetAddress ip1=InetAddress.getByName("www.google.com");
        System.out.println("HostName:"+ip1.getHostName());
        System.out.println("IP address:"+ip1.getHostAddress());

        InetAddress[]ip2=InetAddress.getAllByName("www.google.com");
        for(InetAddress i:ip2){
            System.out.println("IP address:"+i.getHostAddress());
        }

        InetAddress ip3=InetAddress.getLocalHost();
        System.out.println("Local HostName:"+ip3.getHostName());
        System.out.println("Local machine Ip address:"+ip3.getHostAddress());
    }

}
ðŸ§  Mini Mind Map
InetAddress (abstract)
â”‚
â”œâ”€â”€ Factory Methods
â”‚   â”œâ”€â”€ getByName()
â”‚   â”œâ”€â”€ getAllByName()
â”‚   â””â”€â”€ getLocalHost()
â”‚
â”œâ”€â”€ Instance Methods
â”‚   â”œâ”€â”€ getHostName()
â”‚   â”œâ”€â”€ getHostAddress()
â”‚   â””â”€â”€ isReachable()
â”‚
â””â”€â”€ Subclasses
    â”œâ”€â”€ Inet4Address (IPv4)
    â””â”€â”€ Inet6Address (IPv6)

ðŸ“Œ Topic 3: TCP/IP Client Sockets

âœ… Definition:(Socket)
A socket is a communication endpoint â€” a combination of an IP address and a port number â€” that allows two machines to communicate over a network.

âœ… TCP/IP:
TCP = Transmission Control Protocol (connection-oriented, reliable)
IP = Internet Protocol (used for addressing)

âœ… 3. Java Classes Used
| Class                  | Purpose                                   |
| ---------------------- | ----------------------------------------- |
| `java.net.Socket`      | Creates a TCP connection to a remote host |
| `java.io.InputStream`  | Reads data from the server                |
| `java.io.OutputStream` | Sends data to the server                  |

âœ…4. Complete Example: TCP Client Program:(Refer from Topic 1: point-ðŸ”¸ 3. Creating a TCP Client in Java)

ðŸ§  Mini Mind Map
TCP Client Socket
â”œâ”€â”€ Create Socket
â”‚   â””â”€â”€ new Socket(host, port)
â”œâ”€â”€ Send Data
â”‚   â””â”€â”€ getOutputStream() â†’ write()
â”œâ”€â”€ Receive Data
â”‚   â””â”€â”€ getInputStream() â†’ read()
â””â”€â”€ Close Socket

ðŸ“Œ Topic 4: URL, URLConnection, HttpURLConnection, The URI Class, Cookies

ðŸ”¸ 1. URL â€“ java.net.URL
âœ… Definition:
A URL (Uniform Resource Locator) is a reference (an address) to a resource on the Internet.

âœ…Common Methods:
| Method             | Description                               |
| ------------------ | ----------------------------------------- |
| `getProtocol()`    | Returns the protocol (e.g., "https")      |
| `getHost()`        | Returns the domain name                   |
| `getPort()`        | Returns the port (or -1 if not specified) |
| `getPath()`        | Returns the file path                     |
| `openConnection()` | Opens connection to the resource          |

ðŸ”¸ 2. URLConnection & HttpURLConnection
âœ… URLConnection:
Superclass for all types of connections (HTTP, FTP, etc.)
Used to read from or write to a URL

Example:
URL url = new URL("https://www.example.com");
URLConnection conn = url.openConnection();
InputStream in = conn.getInputStream();

âœ… HttpURLConnection:
Subclass of URLConnection for HTTP-specific features
Allows GET, POST requests, setting headers, reading status codes, etc.

Example:
URL url = new URL("https://www.example.com");
HttpURLConnection conn = (HttpURLConnection) url.openConnection();
conn.setRequestMethod("GET");
int status = conn.getResponseCode(); // 200 = OK

ðŸ”¸ 3. Cookies
âœ… What are Cookies?
Small pieces of data stored by a web server on the client browser.
Used to remember user sessions, preferences, or login info.

âœ… How Cookies work:
Server sends a Set-Cookie header in HTTP response.
Browser stores the cookie.
On next request, browser sends Cookie header back to the server.

ðŸ§  Mind Map
Internet Communication
â”‚
â”œâ”€â”€ URL (Locator)
â”‚   â””â”€â”€ getHost(), getProtocol(), getPath()
â”œâ”€â”€ URI (Identifier)
â”‚   â””â”€â”€ More general, supports mailto:, ftp:, etc.
â”œâ”€â”€ URLConnection
â”‚   â””â”€â”€ openConnection() â†’ InputStream
â”œâ”€â”€ HttpURLConnection
â”‚   â””â”€â”€ setRequestMethod(), getResponseCode()
â””â”€â”€ Cookies
    â”œâ”€â”€ Set-Cookie (Server)
    â””â”€â”€ Cookie (Client request)

ðŸ“Œ Topic 5: TCP/IP Server Sockets and Datagrams
ðŸ”¸Part 1: TCP/IP Server Sockets(Refer Topic:1  point:ðŸ”¸ 4. Creating a TCP Server in Java)

ðŸ”¸ Part 2: Datagrams â€“ UDP Communication
âœ… Concept:
UDP (User Datagram Protocol) is connectionless and faster but not guaranteed delivery.
In Java, UDP is handled using:
DatagramSocket (for sending/receiving data)
DatagramPacket (to hold the data)

ðŸ”¹ UDP Server Steps:
Create a DatagramSocket on a port.
Receive packets using receive().
Read the data and respond using send().
âœ… UDP Server Example:
DatagramSocket socket = new DatagramSocket(6000);
byte[] buf = new byte[1024];
DatagramPacket packet = new DatagramPacket(buf, buf.length);
socket.receive(packet);


ðŸ”¹ UDP Client Steps:
Create a DatagramSocket.
Prepare DatagramPacket with data and server address.
Send it using send().
âœ… UDP Client Example:
DatagramSocket socket = new DatagramSocket();
DatagramPacket packet = new DatagramPacket(data, data.length, address, 6000);
socket.send(packet);

ðŸ§  Mind Map:
Socket Communication
â”‚
â”œâ”€â”€ TCP/IP (Reliable)
â”‚   â”œâ”€â”€ ServerSocket
â”‚   â”œâ”€â”€ Socket
â”‚   â””â”€â”€ Streams (Input/Output)
â”‚
â””â”€â”€ UDP (Fast, Unreliable)
    â”œâ”€â”€ DatagramSocket
    â””â”€â”€ DatagramPacket

ðŸ“Œ Topic 6: Connecting to a Server, Implementing Servers, Sending Email

Part 1: Connecting to a Server(Refer Topic:1)
Part 2: Implementing Servers(Refer Topic:1)

Part 3: Sending Email using Java
âœ… Concept:
Sending email in Java requires connecting to an SMTP server.
Java provides the JavaMail API to send emails.
ðŸ’¡ You must include javax.mail and javax.mail.internet packages (usually via an external library like javax.mail.jar).

Set SMTP properties
Create Session and authenticate
Create MimeMessage
Send using Transport.send()

âœ… Example Code (Gmail SMTP):
Properties props = new Properties();
props.put("mail.smtp.host", "smtp.gmail.com");
Session session = Session.getInstance(props, new Authenticator() {...});
MimeMessage msg = new MimeMessage(session);
Transport.send(msg);

ðŸ“ŒTopic 7: Servlet Overview â€“ Java Web Server â€“ Life Cycle of a Servlet â€“ Your First Servlet

âœ… Definition:( Servlet)
A Servlet is a Java class that runs on a web server and acts as a middle layer between client requests (usually HTTP) and server responses.

âœ… Definition:(Servlet Container)
A Servlet container (like Apache Tomcat) is a part of a web server
 that manages the lifecycle of servlets, maps URLs, and handles HTTP requests/responses.(ex.Apache Tomcat)

ðŸ”¹Methods in Servlet Lifecycle:
 [init()] ----> [service()] ----> [destroy()]
     |              ^                |
     |              |                |
   Called      Called per         Called when
 once by       HTTP request       servlet ends
 container

âœ…For Servlet Example:https://github.com/PranavDeshpande2004/AJP-code/tree/main/Login_singup

âœ…Google Docs format of Quick Summary:https://chatgpt.com/canvas/shared/683bfc43c8508191a607658d7ed9e9f2


ðŸ§  Quick Revision Mind Map:
java.net
â”‚
â”œâ”€â”€ TCP (Socket, ServerSocket)
â”‚   â””â”€â”€ Reliable, Stream-based
â”œâ”€â”€ UDP (DatagramSocket, DatagramPacket)
â”‚   â””â”€â”€ Fast, Connectionless
â”œâ”€â”€ InetAddress
â”œâ”€â”€ URL, URLConnection
â”œâ”€â”€ URI, HttpURLConnection
â””â”€â”€ Cookies, Email, Servers

Servlets
â”‚
â”œâ”€â”€ Overview, Java Web Server
â”œâ”€â”€ Servlet Lifecycle
â”‚   â”œâ”€â”€ init()
â”‚   â”œâ”€â”€ service()
â”‚   â””â”€â”€ destroy()
